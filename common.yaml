# Common settings across all environments, all ES versions

rules:

  ## Possible Errors
  ## ---------------

  # https://eslint.org/docs/rules/for-direction
  #   enforce "for" loop update clause moving the counter in the right direction.
  for-direction: error

  # https://eslint.org/docs/rules/getter-return
  #   enforce `return` statements in getters
  getter-return: error

  # https://eslint.org/docs/rules/no-compare-neg-zero
  # ✓ disallow comparing against -0
  no-compare-neg-zero: error

  # https://eslint.org/docs/rules/no-cond-assign
  # ✓ disallow assignment operators in conditional expressions
  no-cond-assign:
    - error
    - except-parens

  # https://eslint.org/docs/rules/no-constant-condition
  # ✓ disallow constant expressions in conditions
  no-constant-condition: error

  # https://eslint.org/docs/rules/no-debugger
  # ✓ disallow the use of `debugger`
  no-debugger: error

  # https://eslint.org/docs/rules/no-dupe-args
  # ✓ disallow duplicate arguments in `function` definitions
  no-dupe-args: error

  # https://eslint.org/docs/rules/no-dupe-keys
  # ✓ disallow duplicate keys in object literals
  no-dupe-keys: error

  # https://eslint.org/docs/rules/no-duplicate-case
  # ✓ disallow duplicate case labels
  no-duplicate-case: error

  # https://eslint.org/docs/rules/no-empty-character-class
  # ✓ disallow empty character classes in regular expressions
  no-empty-character-class: error

  # https://eslint.org/docs/rules/no-empty
  # ✓ disallow empty block statements
  no-empty: error

  # https://eslint.org/docs/rules/no-ex-assign
  # ✓ disallow reassigning exceptions in `catch` clauses
  no-ex-assign: error

  # https://eslint.org/docs/rules/no-extra-boolean-cast
  # ✓ disallow unnecessary boolean casts
  no-extra-boolean-cast: error

  # https://eslint.org/docs/rules/no-extra-semi
  # ✓ disallow unnecessary semicolons
  no-extra-semi: error

  # https://eslint.org/docs/rules/no-func-assign
  # ✓ disallow reassigning `function` declarations
  no-func-assign: error

  # https://eslint.org/docs/rules/no-inner-declarations
  # ✓ disallow variable or `function` declarations in nested blocks
  no-inner-declarations: error

  # https://eslint.org/docs/rules/no-invalid-regexp
  # ✓ disallow invalid regular expression strings in `RegExp` constructors
  no-invalid-regexp: error

  # https://eslint.org/docs/rules/no-irregular-whitespace
  # ✓ disallow irregular whitespace outside of strings and comments
  no-irregular-whitespace: error

  # https://eslint.org/docs/rules/no-obj-calls
  # ✓ disallow calling global object properties as functions
  no-obj-calls: error

  # https://eslint.org/docs/rules/no-prototype-builtins
  #   disallow calling some `Object.prototype` methods directly on objects
  no-prototype-builtins: error

  # https://eslint.org/docs/rules/no-regex-spaces
  # ✓ disallow multiple spaces in regular expressions
  no-regex-spaces: error

  # https://eslint.org/docs/rules/no-sparse-arrays
  # ✓ disallow sparse arrays
  no-sparse-arrays: error

  # https://eslint.org/docs/rules/no-unexpected-multiline
  # ✓ disallow confusing multiline expressions
  no-unexpected-multiline: error

  # https://eslint.org/docs/rules/no-unreachable
  # ✓ disallow unreachable code after `return`, `throw`, `continue`, and `break` statements
  no-unreachable: error

  # https://eslint.org/docs/rules/no-unsafe-finally
  # ✓ disallow control flow statements in `finally` blocks
  no-unsafe-finally: error

  # https://eslint.org/docs/rules/no-unsafe-negation
  # ✓ disallow negating the left operand of relational operators
  no-unsafe-negation: error

  # https://eslint.org/docs/rules/use-isnan
  # ✓ require calls to `isNaN()` when checking for `NaN`
  use-isnan: error

  # https://eslint.org/docs/rules/valid-typeof
  # ✓ enforce comparing `typeof` expressions against valid strings
  valid-typeof: error


  ## Best Practices
  ## --------------

  # https://eslint.org/docs/rules/accessor-pairs
  #   enforce getter and setter pairs in objects
  accessor-pairs: error

  # https://eslint.org/docs/rules/array-callback-return
  #   enforce `return` statements in callbacks of array methods
  array-callback-return: error

  # https://eslint.org/docs/rules/block-scoped-var
  #   enforce the use of variables within the scope they are defined
  block-scoped-var: error

  # https://eslint.org/docs/rules/class-methods-use-this
  #   enforce that class methods utilize `this`
  class-methods-use-this: warn

  # https://eslint.org/docs/rules/consistent-return
  #   require `return` statements to either always or never specify values
  consistent-return: error

  # https://eslint.org/docs/rules/curly
  #   enforce consistent brace style for all control statements
  curly:
    - error
    - multi-line

  # https://eslint.org/docs/rules/dot-location
  #   enforce consistent newlines before and after dots
  dot-location:
    - warn
    - property

  # https://eslint.org/docs/rules/dot-notation
  #   enforce dot notation whenever possible
  dot-notation: warn

  # https://eslint.org/docs/rules/eqeqeq
  #   require the use of `===` and `!==`
  eqeqeq:
    - error
    - always
    - 'null': never

  # https://eslint.org/docs/rules/guard-for-in
  #   require `for-in` loops to include an `if` statement
  guard-for-in: error

  # https://eslint.org/docs/rules/no-alert
  #   disallow the use of `alert`, `confirm`, and `prompt`
  no-alert: error

  # https://eslint.org/docs/rules/no-caller
  #   disallow the use of `arguments.caller` or `arguments.callee`
  no-caller: error

  # https://eslint.org/docs/rules/no-case-declarations
  # ✓ disallow lexical declarations in case clauses
  no-case-declarations: error

  # https://eslint.org/docs/rules/no-else-return
  #   disallow `else` blocks after `return` statements in `if` statements
  no-else-return: error

  # https://eslint.org/docs/rules/no-empty-function
  #   disallow empty functions
  no-empty-function: error

  # https://eslint.org/docs/rules/no-empty-pattern
  # ✓ disallow empty destructuring patterns
  no-empty-pattern: error

  # https://eslint.org/docs/rules/no-eval
  #   disallow the use of `eval()`
  no-eval: error

  # https://eslint.org/docs/rules/no-extend-native
  #   disallow extending native types
  no-extend-native: error

  # https://eslint.org/docs/rules/no-extra-bind
  #   disallow unnecessary calls to `.bind()`
  no-extra-bind: error

  # https://eslint.org/docs/rules/no-extra-label
  #   disallow unnecessary labels
  no-extra-label: error

  # https://eslint.org/docs/rules/no-fallthrough
  # ✓ disallow fallthrough of `case` statements
  no-fallthrough:
    - error
    - commentPattern: '[Ff]alls?\s?through'

  # https://eslint.org/docs/rules/no-floating-decimal
  #   disallow leading or trailing decimal points in numeric literals
  no-floating-decimal: warn

  # https://eslint.org/docs/rules/no-global-assign
  # ✓ disallow assignments to native objects or read-only global variables
  no-global-assign: error

  # https://eslint.org/docs/rules/no-implicit-coercion
  #   disallow shorthand type conversions
  no-implicit-coercion: error

  # https://eslint.org/docs/rules/no-implicit-globals
  #   disallow variable and `function` declarations in the global scope
  no-implicit-globals: error

  # https://eslint.org/docs/rules/no-implied-eval
  #   disallow the use of `eval()`-like methods
  no-implied-eval: error

  # https://eslint.org/docs/rules/no-invalid-this
  #   disallow `this` keywords outside of classes or class-like objects
  no-invalid-this: error

  # https://eslint.org/docs/rules/no-iterator
  #   disallow the use of the `__iterator__` property
  no-iterator: error

  # https://eslint.org/docs/rules/no-lone-blocks
  #   disallow unnecessary nested blocks
  no-lone-blocks: error

  # https://eslint.org/docs/rules/no-loop-func
  #   disallow `function` declarations and expressions inside loop statements
  no-loop-func: error

  # https://eslint.org/docs/rules/no-multi-spaces
  #   disallow multiple spaces
  no-multi-spaces: warn

  # https://eslint.org/docs/rules/no-multi-str
  #   disallow multiline strings
  no-multi-str: error

  # https://eslint.org/docs/rules/no-new-func
  #   disallow `new` operators with the `Function` object
  no-new-func: error

  # https://eslint.org/docs/rules/no-new-wrappers
  #   disallow `new` operators with the `String`, `Number`, and `Boolean` objects
  no-new-wrappers: error

  # https://eslint.org/docs/rules/no-new
  #   disallow `new` operators outside of assignments or comparisons
  no-new: error

  # https://eslint.org/docs/rules/no-octal-escape
  #   disallow octal escape sequences in string literals
  no-octal-escape: error

  # https://eslint.org/docs/rules/no-octal
  # ✓ disallow octal literals
  no-octal: error

  # https://eslint.org/docs/rules/no-proto
  #   disallow the use of the `__proto__` property
  no-proto: error

  # https://eslint.org/docs/rules/no-redeclare
  # ✓ disallow variable redeclaration
  no-redeclare: error

  # https://eslint.org/docs/rules/no-return-assign
  #   disallow assignment operators in `return` statements
  no-return-assign: error

  # https://eslint.org/docs/rules/no-script-url
  #   disallow `javascript:` urls
  no-script-url: error

  # https://eslint.org/docs/rules/no-self-assign
  # ✓ disallow assignments where both sides are exactly the same
  no-self-assign: error

  # https://eslint.org/docs/rules/no-self-compare
  #   disallow comparisons where both sides are exactly the same
  no-self-compare: error

  # https://eslint.org/docs/rules/no-sequences
  #   disallow comma operators
  no-sequences: error

  # https://eslint.org/docs/rules/no-throw-literal
  #   disallow throwing literals as exceptions
  no-throw-literal: error

  # https://eslint.org/docs/rules/no-unmodified-loop-condition
  #   disallow unmodified loop conditions
  no-unmodified-loop-condition: error

  # https://eslint.org/docs/rules/no-unused-expressions
  #   disallow unused expressions
  no-unused-expressions: error

  # https://eslint.org/docs/rules/no-unused-labels
  # ✓ disallow unused labels
  no-unused-labels: error

  # https://eslint.org/docs/rules/no-useless-call
  #   disallow unnecessary calls to `.call()` and `.apply()`
  no-useless-call: error

  # https://eslint.org/docs/rules/no-useless-concat
  #   disallow unnecessary concatenation of literals or template literals
  no-useless-concat: error

  # https://eslint.org/docs/rules/no-useless-escape
  # ✓ disallow unnecessary escape characters
  no-useless-escape: error

  # https://eslint.org/docs/rules/no-useless-return
  #   disallow redundant return statements
  no-useless-return: error

  # https://eslint.org/docs/rules/no-void
  #   disallow `void` operators
  no-void: error

  # https://eslint.org/docs/rules/no-warning-comments
  #   disallow specified warning terms in comments
  no-warning-comments: warn

  # https://eslint.org/docs/rules/no-with
  #   disallow `with` statements
  no-with: error

  # https://eslint.org/docs/rules/prefer-promise-reject-errors
  #   require using Error objects as Promise rejection reasons
  prefer-promise-reject-errors: error

  # https://eslint.org/docs/rules/radix
  #   enforce the consistent use of the radix argument when using `parseInt()`
  radix: error

  # https://eslint.org/docs/rules/wrap-iife
  #   require parentheses around immediate `function` invocations
  wrap-iife: error

  # https://eslint.org/docs/rules/yoda
  #   require or disallow "Yoda" conditions
  yoda:
    - error
    - never
    - exceptRange: true


  ## Strict Mode
  ## -----------

  # https://eslint.org/docs/rules/strict
  #   require or disallow strict mode directives
  strict:
    - error
    - safe


  ## Variables
  ## ---------

  # https://eslint.org/docs/rules/no-catch-shadow
  #   disallow `catch` clause parameters from shadowing variables in the outer scope
  no-catch-shadow: error

  # https://eslint.org/docs/rules/no-delete-var
  # ✓ disallow deleting variables
  no-delete-var: error

  # https://eslint.org/docs/rules/no-label-var
  #   disallow labels that share a name with a variable
  no-label-var: error

  # https://eslint.org/docs/rules/no-shadow-restricted-names
  #   disallow identifiers from shadowing restricted names
  no-shadow-restricted-names: error

  # https://eslint.org/docs/rules/no-shadow
  #   disallow variable declarations from shadowing variables declared in the outer scope
  no-shadow: error

  # https://eslint.org/docs/rules/no-undef-init
  #   disallow initializing variables to `undefined`
  no-undef-init: error

  # https://eslint.org/docs/rules/no-undef
  # ✓ disallow the use of undeclared variables unless mentioned in `/*global */` comments
  no-undef: error

  # https://eslint.org/docs/rules/no-unused-vars
  # ✓ disallow unused variables
  no-unused-vars:
    - error
    - vars: all
      varsIgnorePattern: '^_'
      args: all
      argsIgnorePattern: '^_'
      caughtErrors: all
      caughtErrorsIgnorePattern: "^_"


  # https://eslint.org/docs/rules/no-use-before-define
  #   disallow the use of variables before they are defined
  no-use-before-define: error


  ## Node.js and CommonJS
  ## --------------------

  # https://eslint.org/docs/rules/callback-return
  #   require `return` statements after callbacks
  callback-return: error

  # https://eslint.org/docs/rules/global-require
  #   require `require()` calls to be placed at top-level module scope
  global-require: error

  # https://eslint.org/docs/rules/handle-callback-err
  #   require error handling in callbacks
  handle-callback-err:
    - error
    - '^(error|[a-z][0-9A-Za-z]*Error)$'

  # https://eslint.org/docs/rules/no-buffer-constructor
  #   disallow use of the Buffer() constructor
  no-buffer-constructor: error

  # https://eslint.org/docs/rules/no-mixed-requires
  #   disallow `require` calls to be mixed with regular variable declarations
  no-mixed-requires: error

  # https://eslint.org/docs/rules/no-new-require
  #   disallow `new` operators with calls to `require`
  no-new-require: error

  # https://eslint.org/docs/rules/no-path-concat
  #   disallow string concatenation with `__dirname` and `__filename`
  no-path-concat: error

  # https://eslint.org/docs/rules/no-process-exit
  #   disallow the use of `process.exit()`
  no-process-exit: error

  # https://eslint.org/docs/rules/no-sync
  #   disallow synchronous methods
  no-sync: error


  ## Stylistic Issues
  ## ----------------

  # https://eslint.org/docs/rules/array-bracket-newline
  #   enforce linebreaks after opening and before closing array brackets
  array-bracket-newline:
    - warn
    - multiline: true

  # https://eslint.org/docs/rules/array-bracket-spacing
  #   enforce consistent spacing inside array brackets
  array-bracket-spacing:
    - warn
    - always
    - arraysInArrays: false
      objectsInArrays: false

  # https://eslint.org/docs/rules/block-spacing
  #   disallow or enforce spaces inside of blocks after opening block and before closing block
  block-spacing:
    - warn
    - always

  # https://eslint.org/docs/rules/brace-style
  #   enforce consistent brace style for blocks
  brace-style:
    - warn
    - 1tbs
    - allowSingleLine: true

  # https://eslint.org/docs/rules/camelcase
  #   enforce camelcase naming convention
  camelcase: warn

  # https://eslint.org/docs/rules/comma-dangle
  #   require or disallow trailing commas
  comma-dangle:
    - warn
    - always-multiline

  # https://eslint.org/docs/rules/comma-spacing
  #   enforce consistent spacing before and after commas
  comma-spacing:
    - warn
    - before: false
      after: true

  # https://eslint.org/docs/rules/comma-style
  #   enforce consistent comma style
  comma-style:
    - warn
    - last

  # https://eslint.org/docs/rules/computed-property-spacing
  #   enforce consistent spacing inside computed property brackets
  computed-property-spacing:
    - warn
    - never

  # https://eslint.org/docs/rules/consistent-this
  #   enforce consistent naming when capturing the current execution context
  consistent-this:
    - error
    - self

  # https://eslint.org/docs/rules/eol-last
  #   require or disallow newline at the end of files
  eol-last:
    - warn
    - always

  # https://eslint.org/docs/rules/func-call-spacing
  #   require or disallow spacing between function identifiers and their invocations
  func-call-spacing:
    - warn
    - never

  # https://eslint.org/docs/rules/func-name-matching
  #   require function names to match the name of the variable or property to which they are assigned
  func-name-matching:
    - error
    - always

  # https://eslint.org/docs/rules/id-blacklist
  #   disallow specified identifiers
  id-blacklist:
    - warn
    - cb
    - e
    - ev
    - err
    - data

  # https://eslint.org/docs/rules/indent
  #   enforce consistent indentation
  indent:
    - warn
    - 2
    - SwitchCase: 0
      VariableDeclarator:
        const: 3
        let: 2
        var: 2
      flatTernaryExpressions: true
      outerIIFEBody: 0

  # https://eslint.org/docs/rules/jsx-quotes
  #   enforce the consistent use of either double or single quotes in JSX attributes
  jsx-quotes:
    - warn
    - prefer-double

  # https://eslint.org/docs/rules/key-spacing
  #   enforce consistent spacing between keys and values in object literal properties
  key-spacing:
    - warn
    - multiLine:
        mode: minimum
        beforeColon: false
        afterColon: true
      singleLine:
        mode: strict
        beforeColon: false
        afterColon: true

  # https://eslint.org/docs/rules/keyword-spacing
  #   enforce consistent spacing before and after keywords
  keyword-spacing: warn

  # https://eslint.org/docs/rules/linebreak-style
  #   enforce consistent linebreak style
  linebreak-style:
    - error
    - unix

  # https://eslint.org/docs/rules/lines-around-comment
  #   require empty lines around comments
  lines-around-comment:
    - warn
    - allowArrayStart: true
      allowBlockStart: true
      allowClassStart: true
      allowObjectStart: true
      beforeBlockComment: true
      afterBlockComment: false
      beforeLineComment: true
      afterLineComment: false

  # https://eslint.org/docs/rules/lines-between-class-members
  #   require or disallow an empty line between class members
  lines-between-class-members:
    - warn
    - always

  # https://eslint.org/docs/rules/max-len
  #   enforce a maximum line length
  max-len:
    - warn
    - code: 118
      comments: 79
      ignoreRegExpLiterals: true
      ignoreTemplateLiterals: true
      ignoreUrls: true

  # https://eslint.org/docs/rules/max-statements-per-line
  #   enforce a maximum number of statements allowed per line
  max-statements-per-line:
    - warn
    - max: 4

  # https://eslint.org/docs/rules/new-cap
  #   require constructor names to begin with a capital letter
  new-cap:
    - error
    - capIsNew: true
      newIsCap: true

  # https://eslint.org/docs/rules/new-parens
  #   require parentheses when invoking a constructor with no arguments
  new-parens: error

  # https://eslint.org/docs/rules/newline-per-chained-call
  #   require a newline after each call in a method chain
  newline-per-chained-call:
    - warn
    - ignoreChainWithDepth: 2

  # https://eslint.org/docs/rules/no-array-constructor
  #   disallow `Array` constructors
  no-array-constructor: error

  # https://eslint.org/docs/rules/no-lonely-if
  #   disallow `if` statements as the only statement in `else` blocks
  no-lonely-if: error

  # https://eslint.org/docs/rules/no-mixed-operators
  #   disallow mixed binary operators
  no-mixed-operators:
    - warn
    - groups:
      - ["&", "|", "^", "~", "<<", ">>", ">>>"]
      - ["==", "!=", "===", "!==", ">", ">=", "<", "<="]
      - ["&&", "||"]

  # https://eslint.org/docs/rules/no-mixed-spaces-and-tabs
  # ✓ disallow mixed spaces and tabs for indentation
  no-mixed-spaces-and-tabs: error

  # https://eslint.org/docs/rules/no-multiple-empty-lines
  #   disallow multiple empty lines
  no-multiple-empty-lines:
    - warn
    - max: 2
      maxBOF: 0
      maxEOF: 0

  # https://eslint.org/docs/rules/no-new-object
  #   disallow `Object` constructors
  no-new-object: error

  # https://eslint.org/docs/rules/no-tabs
  #   disallow all tabs
  no-tabs: warn

  # https://eslint.org/docs/rules/no-trailing-spaces
  #   disallow trailing whitespace at the end of lines
  no-trailing-spaces: warn

  # https://eslint.org/docs/rules/no-unneeded-ternary
  #   disallow ternary operators when simpler alternatives exist
  no-unneeded-ternary: error

  # https://eslint.org/docs/rules/no-whitespace-before-property
  #   disallow whitespace before properties
  no-whitespace-before-property: warn

  # https://eslint.org/docs/rules/nonblock-statement-body-position
  #   enforce the location of single-line statements
  nonblock-statement-body-position:
    - error
    - beside

  # https://eslint.org/docs/rules/object-curly-newline
  #   enforce consistent line breaks inside braces
  object-curly-newline:
    - warn
    - multiline: true

  # https://eslint.org/docs/rules/object-curly-spacing
  #   enforce consistent spacing inside braces
  object-curly-spacing:
    - warn
    - always
    - arraysInObjects: false

  # https://eslint.org/docs/rules/object-property-newline
  #   enforce placing object properties on separate lines
  object-property-newline:
    - warn
    - allowMultiplePropertiesPerLine: true

  # https://eslint.org/docs/rules/operator-assignment
  #   require or disallow assignment operator shorthand where possible
  operator-assignment:
    - warn
    - always

  # https://eslint.org/docs/rules/operator-linebreak
  #   enforce consistent linebreak style for operators
  operator-linebreak:
    - warn
    - after

  # https://eslint.org/docs/rules/padded-blocks
  #   require or disallow padding within blocks
  padded-blocks:
    - warn
    - never

  # https://eslint.org/docs/rules/quote-props
  #   require quotes around object literal property names
  quote-props:
    - warn
    - as-needed
    - keywords: false

  # https://eslint.org/docs/rules/quotes
  #   enforce the consistent use of either backticks, double, or single quotes
  quotes:
    - warn
    - double
    - avoidEscape: true

  # https://eslint.org/docs/rules/semi-spacing
  #   enforce consistent spacing before and after semicolons
  semi-spacing:
    - warn
    - before: false
      after: true

  # https://eslint.org/docs/rules/semi-style
  #   enforce location of semicolons
  semi-style:
    - error
    - last

  # https://eslint.org/docs/rules/semi
  #   require or disallow semicolons instead of ASI
  semi:
    - error
    - always

  # https://eslint.org/docs/rules/space-before-blocks
  #   enforce consistent spacing before blocks
  space-before-blocks:
    - warn
    - always

  # https://eslint.org/docs/rules/space-before-function-paren
  #   enforce consistent spacing before `function` definition opening parenthesis
  space-before-function-paren:
    - error
    - anonymous: always
      asyncArrow: always
      named: never

  # https://eslint.org/docs/rules/space-in-parens
  #   enforce consistent spacing inside parentheses
  space-in-parens:
    - warn
    - never

  # https://eslint.org/docs/rules/space-infix-ops
  #   require spacing around infix operators
  space-infix-ops:
    - warn
    - int32Hint: true

  # https://eslint.org/docs/rules/space-unary-ops
  #   enforce consistent spacing before or after unary operators
  space-unary-ops:
    - warn
    - nonwords: false
      words: true

  # https://eslint.org/docs/rules/spaced-comment
  #   enforce consistent spacing after the `//` or `/*` in a comment
  spaced-comment:
    - warn
    - always
    - markers:
        - '*'

  # https://eslint.org/docs/rules/switch-colon-spacing
  #   enforce spacing around colons of switch statements
  switch-colon-spacing:
    - warn
    - before: false
      after: true

  # https://eslint.org/docs/rules/unicode-bom
  #   require or disallow Unicode byte order mark (BOM)
  unicode-bom:
    - error
    - never

